{"remainingRequest":"/Users/zhwtest/Desktop/VueProjects/flask_api_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhwtest/Desktop/VueProjects/flask_api_ui/src/views/interface/components/AddInterface.vue?vue&type=template&id=1f7ce511&","dependencies":[{"path":"/Users/zhwtest/Desktop/VueProjects/flask_api_ui/src/views/interface/components/AddInterface.vue","mtime":1585972655740},{"path":"/Users/zhwtest/Desktop/VueProjects/flask_api_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhwtest/Desktop/VueProjects/flask_api_ui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zhwtest/Desktop/VueProjects/flask_api_ui/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhwtest/Desktop/VueProjects/flask_api_ui/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}